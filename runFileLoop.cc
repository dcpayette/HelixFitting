//***********************************************************************
//***********************************************************************
//    ____  ____  _____  _______     ___      ______       __  
//   |_   ||   _||_   _||_   __ \  .'   `.   / ____ `.    /  | 
//     | |__| |    | |    | |__) |/  .-.  \  `'  __) |    `| |  
//     |  __  |    | |    |  ___/ | |   | |  _  |__ '.     | |  
//    _| |  | |_  _| |_  _| |_    \  `-'  / | \____) | _  _| |_  
//   |____||____||_____||_____|    `.___.'   \______.'(_)|_____| 
// 
//======================================================================= 
// Autogenerated code by HIPO 3.1 io library
// Modify the main loop to suite your needs
// Date: 
//***********************************************************************
#include <cstdlib>
#include <iostream>

#include "reader.h"
#include "node.h"
#include <math.h>

class HitVector{
public:
  int pad; 
  float t; 
  int status; 
  float z; 
  float r; 
  float phi;
  float q;

  HitVector()//Default constructor
  {
    pad = status = -1;
    t = z = r = phi = q = -1.0; 
  }
  HitVector(int _pad, float _t, int _status, float _z, float _r, float _phi, float _q)
  {
    pad = _pad;
    t = _t; 
    status = _status;
    z = _z;
    r = _r;
    phi = _phi;
    q = _q;
  }
};


int main(int argc, char** argv) {
   std::cout << " reading file example program (HIPO) " << std::endl;
   char inputFile[256];

   if(argc>1) {
      sprintf(inputFile,"%s",argv[1]);
   } else {
      std::cout << " *** please provide a file name..." << std::endl;
     exit(0);
   }

   hipo::reader  reader;
   reader.open(inputFile);


   hipo::node<int16_t>      *RTPC__rec_TID = reader.getBranch<int16_t>("RTPC::rec","TID");
   hipo::node<int16_t>   *RTPC__rec_cellID = reader.getBranch<int16_t>("RTPC::rec","cellID");
   hipo::node<float>       *RTPC__rec_posX = reader.getBranch<float>("RTPC::rec","posX");
   hipo::node<float>       *RTPC__rec_posY = reader.getBranch<float>("RTPC::rec","posY");
   hipo::node<float>       *RTPC__rec_posZ = reader.getBranch<float>("RTPC::rec","posZ");
   hipo::node<float>      *RTPC__rec_tdiff = reader.getBranch<float>("RTPC::rec","tdiff");
   hipo::node<float>       *RTPC__rec_time = reader.getBranch<float>("RTPC::rec","time");

   //----------------------------------------------------
   //--  Main LOOP running through events and printing
   //--  values of the first decalred branch
   //----------------------------------------------------
   int entry = 0;
   int hitnum = 0;
   int tid = -1;
   int prevtid = 0;
   int num_chains = 0;
   int hh_num_hits = 0;
   int num_hits_this_chain[300];
   int chain_hits[300][300];
   HitVector *hh_hitlist[600];
   while(reader.next()==true){
      
      entry++;
      if(entry > 1) break;
      
      std::cout << "event # " << entry << std::endl;
      
      int n_RTPC__rec_TID = RTPC__rec_TID->getLength();
      
      for(int b = 0; b < n_RTPC__rec_TID; b++){
	std::cout << RTPC__rec_TID->getValue(b) << " " << RTPC__rec_posZ->getValue(b) << " " ;
	prevtid = RTPC__rec_TID->getValue(b);
	if(tid != prevtid){
	  tid = RTPC__rec_TID->getValue(b);
	  num_chains++;
	}
	num_hits_this_chain[tid]++;
        hh_num_hits++;
        chain_hits[tid][num_hits_this_chain[tid]] = hh_num_hits;
	int cellID = RTPC__rec_cellID->getValue(b);
	float time = RTPC__rec_time->getValue(b);
	float z = RTPC__rec_posZ->getValue(b);
	float x = RTPC__rec_posX->getValue(b);
	float y = RTPC__rec_posY->getValue(b);
	float r = sqrt(x*x+y*y);
	float phi = atan2(y,x);
	float q = 1; 
	hh_hitlist[hh_num_hits] = new HitVector(cellID,time,1,z,r,phi,q);
	std::cout << hh_hitlist[hh_num_hits]->z << std::endl;
      }
      std::cout << hh_hitlist[chain_hits[3][2]] << std::endl;
   }
   //----------------------------------------------------
}
//###### ENF OF GENERATED FILE #######
