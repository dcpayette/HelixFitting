//***********************************************************************
//***********************************************************************
//    ____  ____  _____  _______     ___      ______       __  
//   |_   ||   _||_   _||_   __ \  .'   `.   / ____ `.    /  | 
//     | |__| |    | |    | |__) |/  .-.  \  `'  __) |    `| |  
//     |  __  |    | |    |  ___/ | |   | |  _  |__ '.     | |  
//    _| |  | |_  _| |_  _| |_    \  `-'  / | \____) | _  _| |_  
//   |____||____||_____||_____|    `.___.'   \______.'(_)|_____| 
// 
//======================================================================= 
// Autogenerated code by HIPO 3.1 io library
// Modify the main loop to suite your needs
// Date: 
//***********************************************************************
#include <cstdlib>
#include <iostream>

#include "reader.h"
#include "node.h"
#include <math.h>
#include "BonusHelixFit.cc"

class HitVector{
public:
	int pad; 
	double t; 
	int status; 
	double z; 
	double r; 
	double phi;
	double q;

	HitVector()//Default constructor
	{
		pad = status = -1;
		t = z = r = phi = q = -1.0; 
	}
	HitVector(int _pad, double _t, int _status, double _z, double _r, double _phi, double _q)
	{
		pad = _pad;
		t = _t; 
		status = _status;
		z = _z;
		r = _r;
		phi = _phi;
		q = _q;
	}
};


int main(int argc, char** argv) {
	std::cout << " reading file example program (HIPO) " << std::endl;
	char inputFile[256];

	if(argc>1) {
		sprintf(inputFile,"%s",argv[1]);
	} else {
		std::cout << " *** please provide a file name..." << std::endl;
		exit(0);
	}

	hipo::reader  reader;
	reader.open(inputFile);


	hipo::node<int16_t>      *RTPC__rec_TID = reader.getBranch<int16_t>("RTPC::rec","TID");
	hipo::node<int16_t>   *RTPC__rec_cellID = reader.getBranch<int16_t>("RTPC::rec","cellID");
	hipo::node<float>       *RTPC__rec_posX = reader.getBranch<float>("RTPC::rec","posX");
	hipo::node<float>       *RTPC__rec_posY = reader.getBranch<float>("RTPC::rec","posY");
	hipo::node<float>       *RTPC__rec_posZ = reader.getBranch<float>("RTPC::rec","posZ");
	hipo::node<float>      *RTPC__rec_tdiff = reader.getBranch<float>("RTPC::rec","tdiff");
	hipo::node<float>       *RTPC__rec_time = reader.getBranch<float>("RTPC::rec","time");

	//----------------------------------------------------
	//--  Main LOOP running through events and printing
	//--  values of the first decalred branch
	//----------------------------------------------------
	int entry = 0;
	int hitnum = 0;
	int tid = -1;
	int prevtid = 0;
	int num_chains = 0;
	int hh_num_hits = 0;
	int num_hits_this_chain[300];
	int chain_hits[300][300];
	HitVector *hh_hitlist[600];
	double szpos[300][3];
	while(reader.next()==true){
		entry++;
		if(entry > 1) break;

		std::cout << "event # " << entry << std::endl;

		int n_RTPC__rec_TID = RTPC__rec_TID->getLength();

		for(int b = 0; b < n_RTPC__rec_TID; b++){
		  //std::cout << RTPC__rec_TID->getValue(b) << " " << RTPC__rec_posZ->getValue(b) << std::endl;
			prevtid = RTPC__rec_TID->getValue(b);
			if(tid != prevtid){
			  
				tid = RTPC__rec_TID->getValue(b);
				num_chains++;
				num_hits_this_chain[tid] = 0;
			}
			num_hits_this_chain[tid]++;
			hh_num_hits++;
			chain_hits[tid][num_hits_this_chain[tid]] = hh_num_hits;
			int cellID = RTPC__rec_cellID->getValue(b);
			double time = RTPC__rec_time->getValue(b);
			double z = RTPC__rec_posZ->getValue(b);//*10.0;
			double x = RTPC__rec_posX->getValue(b);//*10.0;
			//std::cout << x << std::endl;
			double y = RTPC__rec_posY->getValue(b);//*10.0;
			double r = sqrt(x*x+y*y);
			double phi = atan2(y,x);
			double q = 1;
			if(tid == 7){
			szpos[num_hits_this_chain[tid]-1][0] = x;
			szpos[num_hits_this_chain[tid]-1][1] = y;
			szpos[num_hits_this_chain[tid]-1][2] = z;
			}
			hh_hitlist[hh_num_hits] = new HitVector(cellID,time,1,z,r,phi,q);
			//std::cout << hh_num_hits << std::endl;
		}
		//std::cout << hh_num_hits << std::endl;
	}
        double R; double A; double B;
        double Phi_deg; double Theta_deg; double Z0; int fit_track_to_beamline=0;
	std::cout << num_hits_this_chain[7] << std::endl;
	HelixFit(num_hits_this_chain[7]-1, szpos, R, A, B, Phi_deg, Theta_deg, Z0, fit_track_to_beamline);
	std::cout << R << " " << A << " " << B << " " << Phi_deg << " " <<  std::endl;
   //----------------------------------------------------
}
//###### ENF OF GENERATED FILE #######
